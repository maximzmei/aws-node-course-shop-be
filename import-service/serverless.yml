service: import-service

frameworkVersion: '3'

plugins:
  - serverless-webpack # serverless webpack plugin

package:
  individually: true # to package functions individually. You can toggle this and check the difference webpack generates

custom:
  webpack: # serverless-webpack plugin options
    webpackConfig: webpack.config.js # Name of webpack configuration file
    includeModules: true # Node modules configuration for packaging
    packager: 'npm' # Packager that will be used to package your external modules

provider:
  name: aws
  runtime: nodejs14.x
  region: eu-west-1
  stage: dev
  environment:
    SQS_URL:
      Ref: SQSQueue
    SNS_ARN:
      Ref: SNSTopic
    PG_HOST: ${file(env.json):PG_HOST}
    PG_PORT: ${file(env.json):PG_PORT}
    PG_DATABASE: ${file(env.json):PG_DATABASE}
    PG_USERNAME: ${file(env.json):PG_USERNAME}
    PG_PASSWORD: ${file(env.json):PG_PASSWORD}
  iamRoleStatements:
    - Effect: 'Allow'
      Action:
        - 's3:ListBucket'
      Resource:
        - 'arn:aws:s3:::import-service-shop-be'
    - Effect: 'Allow'
      Action:
        - 's3:*'
      Resource:
        - 'arn:aws:s3:::import-service-shop-be/*'
    - Effect: 'Allow'
      Action:
        - 'sqs:*'
      Resource: !GetAtt SQSQueue.Arn
    - Effect: 'Allow'
      Action:
        - 'sns:*'
      Resource:
        Ref: SNSTopic

resources:
  Resources:
    SQSQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: catalogItemsQueue
    SNSTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: createProductTopic
    SNSSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        Endpoint: maximzmei@gmail.com
        Protocol: email
        TopicArn:
          Ref: SNSTopic
    SNSSubscriptionFiltered:
      Type: AWS::SNS::Subscription
      Properties:
        Endpoint: maximzmei1@gmail.com
        Protocol: email
        TopicArn:
          Ref: SNSTopic
        FilterPolicy:
          title:
            - Iphone

    GatewayResponseDefault4XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'

  Outputs:
    SQSQueueArn:
      Value:
        Fn::GetAtt: [SQSQueue, Arn]
    SQSQueue:
      Value:
        Ref: SQSQueue

functions:
  importProductsFile:
    handler: src/handlers/index.importProductsFile
    events:
      - http:
          path: import
          method: get
          request:
            parameters:
              querystrings:
                name: true
          cors: true
          authorizer:
            name: basicTokenAuthorizer
            arn: arn:aws:lambda:eu-west-1:345184751867:function:authorization-service-dev-basicAuthorizer
            resultTtlInSeconds: 0
            identitySource: method.request.header.Authorization
            type: token
  importFileParser:
    handler: src/handlers/index.importFileParser
    events:
      - s3:
          bucket: import-service-shop-be
          event: s3:ObjectCreated:*
          rules:
            - prefix: uploaded/
          existing: true
  catalogBatchProcess:
    handler: src/handlers/index.catalogBatchProcess
    events:
      - sqs:
          batchSize: 5
          arn: !GetAtt SQSQueue.Arn
